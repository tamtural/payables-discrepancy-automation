# -*- coding: utf-8 -*-
"""Payables Reconciliation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xKiU6JfhqwZs8BQNB8YS8A_A9D7ythKw
"""

# Payables Reconciliation Script
# Description: Reconciles billing vs payables data, identifies off-balanced transactions, and exports results to Excel

# STEP 1: Install dependencies (for Colab users)
# !pip install xlsxwriter openpyxl

# STEP 2: Import libraries
import pandas as pd
from datetime import datetime
import os
import io
from google.colab import files
from IPython.display import Javascript, display

def scroll_to_bottom():
    display(Javascript('window.scrollTo(0, document.body.scrollHeight);'))

# STEP 3: Upload CSV files
def upload_csv_file(label):
    print(f"\nPlease upload the {label} CSV file.")
    uploaded = files.upload()
    scroll_to_bottom()
    filename = next(iter(uploaded))
    return pd.read_csv(io.BytesIO(uploaded[filename]), encoding='cp1252', low_memory=False)

# STEP 4: Ask for report type
def get_report_type():
    while True:
        rpt = input("\nAre you processing Weekly or Monthly Off-balanced Payables?\n> ").strip().lower()
        if rpt in ['weekly', 'monthly']:
            return rpt
        print("Please enter 'weekly' or 'monthly'.")

# STEP 5: Move a column relative to another
def move_column(df, col_name, target_col, after=True):
    cols = list(df.columns)
    if col_name in cols and target_col in cols:
        cols.remove(col_name)
        idx = cols.index(target_col) + (1 if after else 0)
        cols.insert(idx, col_name)
        return df[cols]
    return df

# STEP 6: Export results to Excel
def export_to_excel(billing_df, off_balanced_df, final_df, report_type):
    billing_df["Settled Date"] = pd.to_datetime(billing_df["Settled Date"], errors="coerce")
    valid_dates = billing_df["Settled Date"].dropna()
    start_date = valid_dates.min().strftime('%m%d%y')
    end_date = valid_dates.max().strftime('%m%d%y')
    date_range = f"{start_date}-{end_date}"
    filename = f"{report_type.capitalize()} Payables Output: {date_range}.xlsx"

    with pd.ExcelWriter(filename, engine="xlsxwriter") as writer:
        billing_df.to_excel(writer, sheet_name="Billing File", index=False)
        off_balanced_df.to_excel(writer, sheet_name=f"Off-Balances {date_range}", index=False)
        final_df.to_excel(writer, sheet_name="Full Analysis", index=False)

        workbook = writer.book
        pink_fill = workbook.add_format({"bg_color": "#ffe6f0"})

        def col_letter(idx):
            letters = ""
            while idx >= 0:
                letters = chr(idx % 26 + ord('A')) + letters
                idx = idx // 26 - 1
            return letters

        for sheet_name, df in {
            f"Off-Balances {date_range}": off_balanced_df,
            "Full Analysis": final_df
        }.items():
            ws = writer.sheets[sheet_name]
            ws.freeze_panes(1, 0)
            for col in [
                "Member ID", "Type", "Product Fee", "Sum of Total", "Product ID",
                "Product Label", "Agent ID", "Agent Label", "Subtype",
                "Difference of Sum_Prod", "Transaction ID", "Difference", "Transaction Amount"
            ]:
                if col in df.columns:
                    idx = df.columns.get_loc(col)
                    col_l = col_letter(idx)
                    cell_range = f"{col_l}2:{col_l}{len(df) + 1}"
                    ws.conditional_format(cell_range, {"type": "no_blanks", "format": pink_fill})

            for idx, col in enumerate(df.columns):
                max_len = max(df[col].astype(str).map(len).max(), len(col))
                ws.set_column(idx, idx, max_len + 2)

        billing_ws = writer.sheets["Billing File"]
        for idx, col in enumerate(billing_df.columns):
            max_len = max(billing_df[col].astype(str).map(len).max(), len(col))
            billing_ws.set_column(idx, idx, max_len + 2)

# STEP 7: Main logic
def main():
    report_type = get_report_type()

    billing_df = upload_csv_file("Billing")
    billing_df.columns = billing_df.columns.str.encode('ascii', 'ignore').str.decode('ascii').str.strip()
    billing_df = billing_df.drop(columns=["Parent Transaction ID"], errors='ignore')
    billing_df["Difference"] = billing_df["Amount"] - billing_df["Earned Payables"]

    for col in ["Comments", "Regen", "Next Steps"]:
        if col not in billing_df.columns:
            billing_df[col] = ""

    insert_idx = list(billing_df.columns).index("Product State of Issue") + 1
    reordered = list(billing_df.columns)
    for col in ["Difference", "Comments", "Next Steps"]:
        if col in reordered:
            reordered.remove(col)
    reordered[insert_idx:insert_idx] = ["Difference", "Comments", "Next Steps"]
    billing_df = billing_df[reordered]

    threshold = 0.20 if report_type == 'weekly' else 1.00
    off_balanced_df = billing_df[abs(billing_df["Difference"]) > threshold].copy()
    off_balanced_df.sort_values("Member Last Name", inplace=True, ignore_index=True)

    payables_df = upload_csv_file("Payables")
    payables_df.columns = payables_df.columns.str.encode('ascii', 'ignore').str.decode('ascii').str.strip()

    member_ids = sorted(off_balanced_df["Member ID"].dropna().astype(str).unique())
    print("\nMember IDs with off-balanced payables:\n")
    print(", ".join(member_ids))

    member_df = upload_csv_file("Member")

    merged_df = payables_df[payables_df["Member ID"].isin(member_ids)].copy()
    merged_df = pd.merge(
        merged_df,
        member_df[["Member ID", "Product ID", "Product Fee"]],
        on=["Member ID", "Product ID"],
        how="left"
    )

    merged_df = pd.merge(
        merged_df,
        off_balanced_df[["Transaction ID", "Difference"]].drop_duplicates("Transaction ID"),
        on="Transaction ID",
        how="inner"
    ).rename(columns={"Difference": "Difference (Billing)"})

    merged_df["Total"] = pd.to_numeric(merged_df["Total"], errors="coerce")
    merged_df.drop_duplicates(subset=["Transaction ID", "Product ID", "Total"], inplace=True)

    merged_df["Sum of Total"] = (
        merged_df.groupby(["Member ID", "Product ID"])["Total"].transform("sum")
    )
    merged_df["Difference of Sum_Prod"] = (merged_df["Sum of Total"] - merged_df["Product Fee"]).abs().round(2)

    final_df = merged_df[merged_df["Difference of Sum_Prod"] > threshold].copy()
    final_df.sort_values(["Member ID", "Product ID"], inplace=True)

    final_df = move_column(final_df, "Sum of Total", "Total")
    final_df = move_column(final_df, "Product Fee", "Sum of Total")
    final_df = move_column(final_df, "Difference of Sum_Prod", "Product Fee")

    export_to_excel(billing_df, off_balanced_df, final_df, report_type)

# Entry point
if __name__ == "__main__":
    main()